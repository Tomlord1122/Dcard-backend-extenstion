// Code generated by sqlc. DO NOT EDIT.

package db

import (
	"database/sql"
	"fmt"
	"time"
)

type CountryEnum string

const (
	CountryEnumTW CountryEnum = "TW"
	CountryEnumJP CountryEnum = "JP"
	CountryEnumUS CountryEnum = "US"
)

func (e *CountryEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CountryEnum(s)
	case string:
		*e = CountryEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for CountryEnum: %T", src)
	}
	return nil
}

type GenderEnum string

const (
	GenderEnumM GenderEnum = "M"
	GenderEnumF GenderEnum = "F"
)

func (e *GenderEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = GenderEnum(s)
	case string:
		*e = GenderEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for GenderEnum: %T", src)
	}
	return nil
}

type PlatformEnum string

const (
	PlatformEnumAndroid PlatformEnum = "android"
	PlatformEnumIos     PlatformEnum = "ios"
	PlatformEnumWeb     PlatformEnum = "web"
)

func (e *PlatformEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PlatformEnum(s)
	case string:
		*e = PlatformEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for PlatformEnum: %T", src)
	}
	return nil
}

type Ad struct {
	ID       int32          `json:"id"`
	Title    string         `json:"title"`
	StartAt  time.Time      `json:"start_at"`
	EndAt    time.Time      `json:"end_at"`
	Age      sql.NullInt32  `json:"age"`
	Gender   []GenderEnum   `json:"gender"`
	Country  []CountryEnum  `json:"country"`
	Platform []PlatformEnum `json:"platform"`
}
